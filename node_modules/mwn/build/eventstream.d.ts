import type { mwn } from './bot';
import type { MwnDate } from './date';
export interface MwnStreamStatic {
    new (streams: string | string[], config: {
        since?: Date | MwnDate | string;
        onopen?: (() => void);
        onerror?: ((evt: MessageEvent) => void);
    }): MwnStream;
    recentchange(filter: Partial<recentchangeProps> | ((data: recentchangeProps) => boolean), action: ((data: recentchangeProps) => void)): MwnStream;
}
export interface MwnStream {
    addListener(filter: ((data: any) => boolean) | any, action: (data: any) => void): void;
}
export declare type recentchangeProps = {
    $schema: string;
    meta: {
        uri: string;
        request_id: string;
        id: string;
        dt: string;
        domain: string;
        stream: string;
        topic: string;
        partition: number;
        offset: number;
    };
    type: 'edit' | 'log' | 'categorize' | 'new';
    namespace: number;
    title: string;
    comment: string;
    parsedcomment: string;
    timestamp: number;
    user: string;
    bot: boolean;
    wiki: string;
    server_url: string;
    server_name: string;
    server_script_path: string;
    id: number;
    minor: boolean;
    patrolled: boolean;
    length: {
        old: number;
        new: number;
    };
    revision: {
        old: number;
        new: number;
    };
    log_id: number;
    log_type: string;
    log_action: string;
    log_params: any;
    log_action_comment: string;
};
export default function (bot: mwn): MwnStreamStatic;
